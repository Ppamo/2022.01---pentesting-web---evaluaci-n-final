#!/bin/bash

LANG=en_US.UTF-8
LANGUAGE=en_US:en
VERBOSE=0
OUTPUT_FILE=

if [ "$COLOR" != "false" ]
then
	RED='\e[31m'
	GREEN='\e[32m'
	BLUE='\e[36m'
	YELLOW='\e[33m'
	BOLD='\e[1m'
	DIM='\e[2m'
	BLINK='\e[5m'
	RESET='\e[39m\e[0m'
fi

usage(){
	printf "\n${GREEN}Usage:
	${BLUE}$0${RESET} ${YELLOW}[COMANDOS...]${RESET}

${GREEN}Comandos disponibles:${RESET}
	help: Muestra esta ayuda
	hosts (-H): Enumera los hosts disponibles dada una máscara de red
	ports (-P): Enumera puertos disponibles en la máquina destino
	sniff (-S): Captura paquetes desde la interfaz de red indicada
	verbose (-V): Activa/Desactiva el modo verboso

${GREEN}Ejemplo:${RESET}

	> $0 hosts 192.168.1.0/24
	> $0 -H 192.168.1.0/24
	Los comandos anteriores inician un escaneo en busqueda de hosts en la red 192.168.1.0 con submascara de red 24

	> $0 ports 192.168.1.1
	> $0 -P 192.168.1.1
	Los comandos anteriores inician un escaneo de puertos al host 192.168.1.1

	> $0 verbose sniff eth0
	> $0 -V -S eth0
	Los comandos anteriores activan el modo verboso y a continuación comienza una captura de paquetes en la interfaz eth0

"
	
}

# # #

error(){
	printf "! ${RED}ERROR:${RESET} %s\n" "$1"
}

show_port_info(){
	[ $VERBOSE -eq 1 ] && printf "${GREEN}%s ${RESET}> Puerto abierto\n" "$2" || echo -n " $2 "
	OUTPUT=$(timeout 1 bash -c "cat </dev/tcp/$1/$2" | tr -d '\0' | sed -e :a -e ';$!N;s/\n//;ta')
	OUTPUT="${OUTPUT//[^a-zA-Z0-9_ \/\.;:\|]/}"
	# Check if it speaks HTTP
	HEAD=$(timeout 2 curl -s --head http://$1:$2 2>&1)
	if [ $? -eq 0 ]; then
		HEAD=$(echo "$HEAD" | sed -e :a -e ';$!N;s/\n/; /;ta' | tr '\n' ';')
		HEAD="${HEAD//[^a-zA-Z0-9_ \/\.;:\|]/}"
		printf "%i > %s >> %s\n" "$2" "$OUTPUT" "$HEAD" >> $OUTPUT_FILE
	else
		printf "%i > %s\n" "$2" "$OUTPUT" >> $OUTPUT_FILE
	fi
}

scan_ports(){
	TARGET=$1
	rm -f $OUTPUT_FILE
	printf "${YELLOW}*${GREEN} Buscando puertos abiertos en ${YELLOW}%s\n${RESET}" "$TARGET"
	arping -c 1 -w 1 $TARGET > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		error "Target not found"
		exit 1
	fi
	for I in $(seq 1 65535); do
		if [ $(( $I % 5000 )) -eq 0 ]; then
			[ $VERBOSE -eq 1 ] && printf "${YELLOW}>>${RESET} escaneados %5i puertos\n" "$I" || echo -n "."
		fi
		timeout 1 bash -c "< /dev/tcp/$1/$I" 2>/dev/null && show_port_info "$TARGET" "$I"  &
	done; wait
	printf "\n\n${YELLOW}* ${GREEN}Resultados:\n${RESET}"
	cat $OUTPUT_FILE | sort -n
}

scan_hosts(){
	TARGET=$1
	ADDRESS=${TARGET%/*}
	MASK=${TARGET#*/}
	printf "${YELLOW}*${GREEN} Buscando hosts en ${YELLOW}%s${RESET}/${BLUE}%s${RESET}:\n" \
		"$ADDRESS" "$MASK"
}

# # #

if [ -z "$1" ]
then
	usage
fi

ARGS=("${@}")
I=0
while [ $I -lt ${#ARGS[@]} ]
do
	OUTPUT_FILE=
	TIMESTAMP=$(date "+%Y%m%d.%H%M%S")
	COMMAND=${ARGS[$I]}
	case "$COMMAND" in
		help)
			usages
			;;
		hosts|-H)
			OUTPUT_FILE=$TIMESTAMP-hosts.log
			scan_hosts "${ARGS[@]:$(($I+1))}"
			I=$(( I+1 ))
			;;
		ports|-P)
			OUTPUT_FILE=$TIMESTAMP-ports.log
			scan_ports "${ARGS[@]:$(($I+1))}"
			I=$(( I+2 ))
			;;
		sniff|-S)
			OUTPUT_FILE=$TIMESTAMP-dump.pcap
			sniff "${ARGS[@]:$(($I+1))}"
			I=$(( I+2 ))
			;;
		verbose|-V)
			VERBOSE=$([ $VERBOSE -eq 1 ] && echo 0 || echo 1)
			if [ $VERBOSE -eq 1 ]; then
				printf "${YELLOW}* ${GREEN}Activado modo verboso\n${RESET}"
			else
				printf "${YELLOW}* ${GREEN}Desactivado modo verboso\n${RESET}"
			fi
			;;
		*)
			printf "* ERROR: Command '$command' not found\n"
			usage
			exit 1
	esac
	I=$(( I+1 ))
	echo
done

#################################################################
# *** Grupo N°1 *** 						#
# - Integrante 1: Camilo Hernan Rojas Vera			#
# - Integrante 2: Cristian Francisco Rocco Salgado		#
# - Integrante 3: Pablo Andrés Mansilla Ojeda			#
# - Integrante 4: Diego Nicolas Espindola Olav			#
# - Integrante 5: Misael Hemdan Israel López Flores		#
#################################################################
