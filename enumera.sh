#!/bin/bash
LANG=en_US.UTF-8
LANGUAGE=en_US:en

if [ "$COLOR" != "false" ]
then
	RED='\e[31m'
	GREEN='\e[32m'
	BLUE='\e[36m'
	YELLOW='\e[33m'
	BOLD='\e[1m'
	DIM='\e[2m'
	BLINK='\e[5m'
	RESET='\e[39m\e[0m'
fi

usage(){
	printf "Usage:
	${BLUE}$0${RESET} [help|-h|enumera|-e]

	enumera (-e): Enumera puertos disponibles en la m√°quina destino
	help: Muestra esta ayuda

"
	
}

show_port_info(){
	OUTPUT=$(timeout 1 bash -c "cat </dev/tcp/$1/$2" | tr -d '\0')
	printf "%i> %s\n" "$2" "$OUTPUT"  >> .output.log
}

error(){
	printf "! ${RED}ERROR:${RESET} %s\n" "$1"
}

enumerate_target(){
	TARGET=$1
	rm -Rf .tmp
	mkdir .tmp
	rm -f .output.log
	printf "${YELLOW}*${GREEN} Scanning target %s\n${RESET}" "$TARGET"
	arping -c 1 -w 1 $TARGET > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		error "Target not found"
		exit 1
	fi
	for I in $(seq 1 65535); do
		if [ $(( $I % 5000 )) -eq 0 ]; then
			printf "${YELLOW}>>${RESET} scanned %5i ports\n" "$I"
		fi
		timeout 1 bash -c "< /dev/tcp/$1/$I" 2>/dev/null && show_port_info "$TARGET" "$I"  &
	done; wait
	cat .output.log | sort -n
	rm -Rf .tmp
	rm -f .output.log
}

if [ -z "$1" ]
then
	usage
fi

ARGS=("${@}")
I=0
while [ $I -lt ${#ARGS[@]} ]
do
	COMMAND=${ARGS[$I]}
	case "$COMMAND" in
		help|-h)
			usage
			;;
		enumera|-e)
			enumerate_target "${ARGS[@]:$(($I+1))}"
			I=$(( I+1 ))
			;;
		*)
			printf "* ERROR: Command '$command' not found\n"
			usage
			exit 1
	esac
	I=$(( I+1 ))
	echo
done

